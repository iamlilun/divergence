//@version=5
indicator('Divergence-改', overlay=true, max_bars_back=1000, max_lines_count=500, max_labels_count=500)

///定義可從設定更改的值
prd = input.int(defval=5, title='Pivot Period', minval=1, maxval=50)
source = input.string(defval='Close', title='Source for Pivot Points', options=['Close', 'High/Low'])
searchdiv = input.string(defval='Regular', title='Divergence Type', options=['Regular', 'Hidden', 'Regular/Hidden'])
showindis = input.string(defval='Full', title='Show Indicator Names', options=['Full', 'First Letter', 'Don\'t Show'])
showlimit = input.int(1, title='Minimum Number of Divergence', minval=1, maxval=11)
maxpp = input.int(defval=10, title='Maximum Pivot Points to Check', minval=1, maxval=20)
maxbars = input.int(defval=100, title='Maximum Bars to Check', minval=30, maxval=200)
shownum = input(defval=true, title='Show Divergence Number')
showlast = input(defval=false, title='Show Only Last Divergence')
dontconfirm = input(defval=false, title='Don\'t Wait for Confirmation')
showlines = input(defval=true, title='Show Divergence Lines')
showpivot = input(defval=false, title='Show Pivot Points')
calcmacd = input(defval=true, title='MACD')
calcmacda = input(defval=true, title='MACD Histogram')
calcrsi = input(defval=true, title='RSI')
calcstoc = input(defval=true, title='Stochastic')
calccci = input(defval=true, title='CCI')
calcmom = input(defval=true, title='Momentum')
calcobv = input(defval=true, title='OBV')
calcvwmacd = input(true, title='VWmacd')
calccmf = input(true, title='Chaikin Money Flow')
calcmfi = input(true, title='Money Flow Index')
calcext = input(false, title='Check External Indicator')
externalindi = input(defval=close, title='External Indicator')

pos_reg_div_col = input(defval=color.yellow, title='Positive Regular Divergence')
neg_reg_div_col = input(defval=color.navy, title='Negative Regular Divergence')
pos_hid_div_col = input(defval=color.lime, title='Positive Hidden Divergence')
neg_hid_div_col = input(defval=color.red, title='Negative Hidden Divergence')

pos_div_text_col = input(defval=color.black, title='Positive Divergence Text Color')
neg_div_text_col = input(defval=color.white, title='Negative Divergence Text Color')
reg_div_l_style_ = input.string(defval='Solid', title='Regular Divergence Line Style', options=['Solid', 'Dashed', 'Dotted'])
hid_div_l_style_ = input.string(defval='Dashed', title='Hdden Divergence Line Style', options=['Solid', 'Dashed', 'Dotted'])
reg_div_l_width = input.int(defval=2, title='Regular Divergence Line Width', minval=1, maxval=5)
hid_div_l_width = input.int(defval=1, title='Hidden Divergence Line Width', minval=1, maxval=5)
showmas = input.bool(defval=false, title='Show MAs 50 & 200', inline='ma12')
cma1col = input.color(defval=color.lime, title='', inline='ma12')
cma2col = input.color(defval=color.red, title='', inline='ma12')

plot(showmas ? ta.sma(close, 50) : na, color=showmas ? cma1col : na)
plot(showmas ? ta.sma(close, 200) : na, color=showmas ? cma2col : na)

// set line styles
var reg_div_l_style = reg_div_l_style_ == 'Solid' ? line.style_solid : reg_div_l_style_ == 'Dashed' ? line.style_dashed : line.style_dotted
var hid_div_l_style = hid_div_l_style_ == 'Solid' ? line.style_solid : hid_div_l_style_ == 'Dashed' ? line.style_dashed : line.style_dotted


/// get indicators
rsi = ta.rsi(close, 14)  // RSI 相對強弱指標
[macd, signal, deltamacd] = ta.macd(close, 12, 26, 9)  // MACD 平滑異同移動平均線
moment = ta.mom(close, 10)  // Momentum 動能指標
cci = ta.cci(close, 34)  // CCI 順勢指標
Obv = ta.obv  // OBV 人氣指標
stk = ta.sma(ta.stoch(close, high, low, 14), 3)  // Stoch 隨機指標均線

// volume weighted macd 成交量的macd
maFast = ta.vwma(close, 12)  
maSlow = ta.vwma(close, 26)
vwmacd = maFast - maSlow

// Chaikin money flow 嘉慶資金流向指標
Cmfm = (close - low - (high - close)) / (high - low)  
Cmfv = Cmfm * volume
cmf = ta.sma(Cmfv, 21) / ta.sma(volume, 21)

Mfi = ta.mfi(close, 14)  // Moneyt Flow Index 資金流向指標

/// keep indicators names and colors in arrays
var indicators_name = array.new_string(11)
var div_colors = array.new_color(4)
if barstate.isfirst
    // names
    array.set(indicators_name, 0, showindis == 'Full' ? 'MACD' : 'M')
    array.set(indicators_name, 1, showindis == 'Full' ? 'Hist' : 'H')
    array.set(indicators_name, 2, showindis == 'Full' ? 'RSI' : 'E')
    array.set(indicators_name, 3, showindis == 'Full' ? 'Stoch' : 'S')
    array.set(indicators_name, 4, showindis == 'Full' ? 'CCI' : 'C')
    array.set(indicators_name, 5, showindis == 'Full' ? 'MOM' : 'M')
    array.set(indicators_name, 6, showindis == 'Full' ? 'OBV' : 'O')
    array.set(indicators_name, 7, showindis == 'Full' ? 'VWMACD' : 'V')
    array.set(indicators_name, 8, showindis == 'Full' ? 'CMF' : 'C')
    array.set(indicators_name, 9, showindis == 'Full' ? 'MFI' : 'M')
    array.set(indicators_name, 10, showindis == 'Full' ? 'Extrn' : 'X')
    //colors
    array.set(div_colors, 0, pos_reg_div_col)
    array.set(div_colors, 1, neg_reg_div_col)
    array.set(div_colors, 2, pos_hid_div_col)
    array.set(div_colors, 3, neg_hid_div_col)

// Check if we get new Pivot High Or Pivot Low
float ph = ta.pivothigh(source == 'Close' ? close : high, prd, prd) //pivot high
float pl = ta.pivotlow(source == 'Close' ? close : low, prd, prd) //pivot low

plotshape(ph and showpivot, text='H', style=shape.labeldown, color=color.new(color.white, 100), textcolor=color.new(color.red, 0), location=location.abovebar, offset=-prd)
plotshape(pl and showpivot, text='L', style=shape.labelup, color=color.new(color.white, 100), textcolor=color.new(color.lime, 0), location=location.belowbar, offset=-prd)

// keep values and positions of Pivot Highs/Lows in the arrays
var int maxarraysize = 20 //max array size
var ph_positions = array.new_int(maxarraysize, 0)
var pl_positions = array.new_int(maxarraysize, 0)
var ph_vals = array.new_float(maxarraysize, 0.)
var pl_vals = array.new_float(maxarraysize, 0.)

// add PHs to the array
if ph
    //再array開頭插入樞軸高點的位置跟值
    array.unshift(ph_positions, bar_index)
    array.unshift(ph_vals, ph)

    //超過預定的最大值就刪掉最後一個
    if array.size(ph_positions) > maxarraysize
        array.pop(ph_positions)
        array.pop(ph_vals)

// add PLs to the array
if pl
    //再array開頭插入樞軸低點點的位置跟值
    array.unshift(pl_positions, bar_index)
    array.unshift(pl_vals, pl)

    //超過預定的最大值就刪掉最後一個
    if array.size(pl_positions) > maxarraysize
        array.pop(pl_positions)
        array.pop(pl_vals)

//----------------------------

///------------------------
/// functions to check Regular Divergences and Hidden Divergences
/// 背離判斷函數
///------------------------

///
/// function to check positive regular or negative hidden divergence
/// @param {series float}: src => indicator source
/// @param {int} cond: 1 => positive_regular, 2 => negative_hidden
/// @return {int} divergence length
///
positive_regular_positive_hidden_divergence(src, cond) =>
    divlen = 0 //背離長度

    prsc = source == 'Close' ? close : low

    //確定收盤後才做判斷
    if barstate.isconfirmed
        // if indicators higher than last value and close price is higher than las close 
        // 不等待最後一筆資料 或 指標值高於前一筆 或 收盤價高於前一筆
        if dontconfirm or src > src[1] or close > close[1]
            startpoint = dontconfirm ? 0 : 1  // don't check last candle 起始點..
            // we search last 15 PPs
            //maxpp default = 10
            for x = 0 to maxpp - 1 by 1
                //計算當前的判斷長度(也是判斷點的index) = bar_index - 第x筆的樞軸低點index + 樞軸強度(預設5)
                len = bar_index - array.get(pl_positions, x) + prd

                // if we reach non valued array element or arrived 101. or previous bars then we don't search more
                // 樞軸低點index是0 或 判斷長度超過最大的K棒數(預設100)..就結束判斷
                if array.get(pl_positions, x) == 0 or len > maxbars
                    break

                // 判斷長度 > 5才做判斷
                // 判斷 positive regular 條件:
                //     指標的起始值 高於 判斷點的index值 and prsc的起始值 低於 低點樞柚值
                // 判斷 negative hidden 條件:
                //     指標的起始值 低於 判斷點的index值 and prsc的起始值低 高於 低點樞柚值
                // ------------------------------------------
                // 具體而言..src是判斷指標線的起幅..prsc是判斷K線的起幅
                // 如果低點指標往上..而K線往下則成為positive regular divergence(正規看漲背離).
                // 如果低點指標往下..而K線往上則成為negative hidden divergence(隱式看跌背離?這裡要問老師看是什麼東東..預設值是不顯示).
                if len > 5 and 
                   (
                      cond == 1 and
                      src[startpoint] > src[len] and 
                      prsc[startpoint] < nz(array.get(pl_vals, x)) 
                      or
                      cond == 2 and 
                      src[startpoint] < src[len] and
                      prsc[startpoint] > nz(array.get(pl_vals, x))
                   )
                    //計算指標斜率
                    slope1 = (src[startpoint] - src[len]) / (len - startpoint)
                    virtual_line1 = src[startpoint] - slope1

                    //計算收盤價斜率
                    slope2 = (close[startpoint] - close[len]) / (len - startpoint)
                    virtual_line2 = close[startpoint] - slope2

                    arrived = true

                    //判斷趨勢方向是否一致
                    for y = 1 + startpoint to len - 1 by 1
                        //指標值低於線段1 或 收盤價低於線段2..就不符合條件..
                        if src[y] < virtual_line1 or nz(close[y]) < virtual_line2
                            arrived := false
                            break
                        virtual_line1 -= slope1
                        virtual_line2 -= slope2

                    if arrived
                        divlen := len
                        break
    divlen

///
/// function to check negative regular or positive hidden divergence
/// cond == 1 => negative_regular, cond == 2=> positive_hidden
///
negative_regular_negative_hidden_divergence(src, cond) =>
    divlen = 0
    prsc = source == 'Close' ? close : high

    if barstate.isconfirmed
        // if indicators higher than last value and close price is higher than las close 
        // 指標值低於前一筆 或 收盤價低於前一筆
        if dontconfirm or src < src[1] or close < close[1]
            startpoint = dontconfirm ? 0 : 1  // don't check last candle
            // we search last 15 PPs
            for x = 0 to maxpp - 1 by 1
                //計算當前的判斷長度(也是判斷點的index) = bar_index - 第x筆的樞軸高點index + 樞軸強度(預設5)
                len = bar_index - array.get(ph_positions, x) + prd

                // if we reach non valued array element or arrived 101. or previous bars then we don't search more
                 // 樞軸高點index是0 或 判斷長度超過最大的K棒數(預設100)..就結束判斷
                if array.get(ph_positions, x) == 0 or len > maxbars
                    break

                // 判斷長度 > 5才做判斷
                // 判斷 negative regular 條件:
                //     指標的起始值 低於 判斷點的index值 and prsc的起始值 高於 高點樞柚值
                // 判斷 positive hidden 條件:
                //     指標的起始值 高於 判斷點的index值 and prsc的起始值低 低於 高點樞柚值
                // ------------------------------------------
                // 具體而言..src是判斷指標線的起幅..prsc是判斷K線的起幅
                // 如果高點指標往下..而K線往上則成為negative regular divergence(正規看跌背離).
                // 如果高點指標往上..而K線往下則成為positive hidden divergence(隱式看漲背離?這裡要問老師看是什麼東東..預設值是不顯示).   
                if len > 5 and 
                   (
                       cond == 1 and
                       src[startpoint] < src[len] and
                       prsc[startpoint] > nz(array.get(ph_vals, x)) 
                       or 
                       cond == 2 and 
                       src[startpoint] > src[len] 
                       and prsc[startpoint] < nz(array.get(ph_vals, x))
                   )
                    //計算指標斜率
                    slope1 = (src[startpoint] - src[len]) / (len - startpoint)
                    virtual_line1 = src[startpoint] - slope1

                    //計算收盤價斜率
                    slope2 = (close[startpoint] - nz(close[len])) / (len - startpoint)
                    virtual_line2 = close[startpoint] - slope2

                    arrived = true
                    //判斷趨勢方向是否一致
                    for y = 1 + startpoint to len - 1 by 1
                        if src[y] > virtual_line1 or nz(close[y]) > virtual_line2
                            arrived := false
                            break
                        virtual_line1 -= slope1
                        virtual_line2 -= slope2

                    if arrived
                        divlen := len
                        break
    divlen
///
/// calculate 4 types of divergence if enabled in the options and return divergences in an array
/// 判斷4種背離狀態並把bar_index存進array
///
calculate_divs(cond, indicator_1) =>
    divs = array.new_int(4, 0)
    array.set(divs, 0, cond and (searchdiv == 'Regular' or searchdiv == 'Regular/Hidden') ? positive_regular_positive_hidden_divergence(indicator_1, 1) : 0)
    array.set(divs, 1, cond and (searchdiv == 'Regular' or searchdiv == 'Regular/Hidden') ? negative_regular_negative_hidden_divergence(indicator_1, 1) : 0)
    array.set(divs, 2, cond and (searchdiv == 'Hidden' or searchdiv == 'Regular/Hidden') ? positive_regular_positive_hidden_divergence(indicator_1, 2) : 0)
    array.set(divs, 3, cond and (searchdiv == 'Hidden' or searchdiv == 'Regular/Hidden') ? negative_regular_negative_hidden_divergence(indicator_1, 2) : 0)
    divs
    
// array to keep all divergences
var all_divergences = array.new_int(44)  // 11 indicators * 4 divergence = 44 elements

///
/// set related array elements
///
array_set_divs(div_pointer, index) =>
    //輪詢4種狀態
    for x = 0 to 3 by 1
        //依序儲存每種指標的各種背離狀態到 all_divergences array..
        //順序: 
        //    0 => macd positive regular
        //    1 => macd negative regular
        //    2 => macd positive hidden
        //    3 => macd negative hidden
        //    5 => macda positive regular
        //    6 ...
        array.set(all_divergences, index * 4 + x, array.get(div_pointer, x))

/// set divergences array
/// 指標判斷4種背離..並把結果塞進array
array_set_divs(calculate_divs(calcmacd, macd), 0)
array_set_divs(calculate_divs(calcmacda, deltamacd), 1)
array_set_divs(calculate_divs(calcrsi, rsi), 2)
array_set_divs(calculate_divs(calcstoc, stk), 3)
array_set_divs(calculate_divs(calccci, cci), 4)
array_set_divs(calculate_divs(calcmom, moment), 5)
array_set_divs(calculate_divs(calcobv, Obv), 6)
array_set_divs(calculate_divs(calcvwmacd, vwmacd), 7)
array_set_divs(calculate_divs(calccmf, cmf), 8)
array_set_divs(calculate_divs(calcmfi, Mfi), 9)
array_set_divs(calculate_divs(calcext, externalindi), 10)

/// check minimum number of divergence, if less than showlimit then delete all divergence
/// 如果背離的指標數低於最低顯示數(預設1).清空所有all_divergences裡的資料..
total_div = 0
for x = 0 to array.size(all_divergences) - 1 by 1
    total_div += math.round(math.sign(array.get(all_divergences, x)))
    total_div

if total_div < showlimit
    array.fill(all_divergences, 0)


/// keep line in an array
var pos_div_lines = array.new_line(0) //儲存看漲背離線
var neg_div_lines = array.new_line(0) //儲存看跌背離線
var pos_div_labels = array.new_label(0) //儲存看漲背離標籤
var neg_div_labels = array.new_label(0) //儲存看跌背離標籤

///
/// remove old lines and labels if showlast option is enabled
/// 如果設定只顯示最後一筆時..用來刪除舊的線跟標籤用的..
///
delete_old_pos_div_lines() =>
    if array.size(pos_div_lines) > 0
        for j = 0 to array.size(pos_div_lines) - 1 by 1
            line.delete(array.get(pos_div_lines, j))
        array.clear(pos_div_lines)

delete_old_neg_div_lines() =>
    if array.size(neg_div_lines) > 0
        for j = 0 to array.size(neg_div_lines) - 1 by 1
            line.delete(array.get(neg_div_lines, j))
        array.clear(neg_div_lines)

delete_old_pos_div_labels() =>
    if array.size(pos_div_labels) > 0
        for j = 0 to array.size(pos_div_labels) - 1 by 1
            label.delete(array.get(pos_div_labels, j))
        array.clear(pos_div_labels)

delete_old_neg_div_labels() =>
    if array.size(neg_div_labels) > 0
        for j = 0 to array.size(neg_div_labels) - 1 by 1
            label.delete(array.get(neg_div_labels, j))
        array.clear(neg_div_labels)

// delete last creted lines and labels until we met new PH/PV
// 清掉最後一筆看漲背離的線跟標籤
delete_last_pos_div_lines_label(n) =>
    if n > 0 and array.size(pos_div_lines) >= n
        asz = array.size(pos_div_lines)
        for j = 1 to n by 1
            line.delete(array.get(pos_div_lines, asz - j))
            array.pop(pos_div_lines)
        if array.size(pos_div_labels) > 0
            label.delete(array.get(pos_div_labels, array.size(pos_div_labels) - 1))
            array.pop(pos_div_labels)

// 清掉最後一筆看跌背離的線跟標籤
delete_last_neg_div_lines_label(n) =>
    if n > 0 and array.size(neg_div_lines) >= n
        asz = array.size(neg_div_lines)
        for j = 1 to n by 1
            line.delete(array.get(neg_div_lines, asz - j))
            array.pop(neg_div_lines)
        if array.size(neg_div_labels) > 0
            label.delete(array.get(neg_div_labels, array.size(neg_div_labels) - 1))
            array.pop(neg_div_labels)

// variables for Alerts
pos_reg_div_detected = false
neg_reg_div_detected = false
pos_hid_div_detected = false
neg_hid_div_detected = false

// to remove lines/labels until we met new // PH/PL
var last_pos_div_lines = 0
var last_neg_div_lines = 0
var remove_last_pos_divs = false
var remove_last_neg_divs = false
if pl
    remove_last_pos_divs := false
    last_pos_div_lines := 0
    last_pos_div_lines
if ph
    remove_last_neg_divs := false
    last_neg_div_lines := 0
    last_neg_div_lines

// draw divergences lines and labels
divergence_text_top = ''
divergence_text_bottom = ''
distances = array.new_int(0)
dnumdiv_top = 0
dnumdiv_bottom = 0
top_label_col = color.white
bottom_label_col = color.white
old_pos_divs_can_be_removed = true
old_neg_divs_can_be_removed = true
startpoint = dontconfirm ? 0 : 1  // used for don't confirm option

//輪詢11種指標
for x = 0 to 10 by 1
    div_type = -1 //背離類型預設 -1 
    //輪詢各指標的4種背離狀態
    for y = 0 to 3 by 1
        if array.get(all_divergences, x * 4 + y) > 0  // any divergence?
            div_type := y
            
            // y % 2 :
            // 0 => positive regular 
            // 1 => negative regular
            // 0 => positive hidden
            // 1 => negative hidden
            if y % 2 == 1
                dnumdiv_top += 1
                top_label_col := array.get(div_colors, y)
            
            if y % 2 == 0
                dnumdiv_bottom += 1
                bottom_label_col := array.get(div_colors, y)
            
            //
            //線不存在時..畫線的邏輯
            //
            if not array.includes(distances, array.get(all_divergences, x * 4 + y))  // line not exist ?
                array.push(distances, array.get(all_divergences, x * 4 + y)) //距離array加上背離的bar index
                
                new_line = showlines ? line.new(
                   x1=bar_index - array.get(all_divergences, x * 4 + y), 
                   y1=source == 'Close' ? close[array.get(all_divergences, x * 4 + y)] : y % 2 == 0 ? low[array.get(all_divergences, x * 4 + y)] : high[array.get(all_divergences, x * 4 + y)], 
                   x2=bar_index - startpoint, 
                   y2=source == 'Close' ? close[startpoint] : y % 2 == 0 ? low[startpoint] : high[startpoint], 
                   color=array.get(div_colors, y), 
                   style=y < 2 ? reg_div_l_style : hid_div_l_style, 
                   width=y < 2 ? reg_div_l_width : hid_div_l_width) : na
                
                //看漲背離
                if y % 2 == 0
                    //如果old_pos_divs_can_be_removed是true..就改為false..
                    //這樣下一筆就不會進這判斷式..
                    if old_pos_divs_can_be_removed
                        old_pos_divs_can_be_removed := false
                        //如果沒設定只顯示最後一筆 和 開啟刪除最後一筆看漲背離.
                        if not showlast and remove_last_pos_divs
                            delete_last_pos_div_lines_label(last_pos_div_lines) //刪除最後一筆線跟標籤
                            last_pos_div_lines := 0
                            last_pos_div_lines
                        
                        //如果設定只顯示最後一筆..就刪掉所有舊資料
                        if showlast
                            delete_old_pos_div_lines()
                    
                    array.push(pos_div_lines, new_line)
                    last_pos_div_lines += 1
                    remove_last_pos_divs := true

                //看跌背離
                if y % 2 == 1
                    if old_neg_divs_can_be_removed
                        old_neg_divs_can_be_removed := false
                        if not showlast and remove_last_neg_divs
                            delete_last_neg_div_lines_label(last_neg_div_lines)
                            last_neg_div_lines := 0
                        
                        if showlast
                            delete_old_neg_div_lines()

                    array.push(neg_div_lines, new_line)
                    last_neg_div_lines += 1
                    remove_last_neg_divs := true
                    
            // set variables for alerts
            if y == 0
                pos_reg_div_detected := true
               
            if y == 1
                neg_reg_div_detected := true
               
            if y == 2
                pos_hid_div_detected := true
               
            if y == 3
                neg_hid_div_detected := true
               
    // get text for labels
    if div_type >= 0
        //@TODO 判斷是什麼指標類型
        
        //看跌背離顯示在上面
        divergence_text_top += (div_type % 2 == 1 ? showindis != 'Don\'t Show' ? array.get(indicators_name, x) + '\n' : '' : '')
        
        //看漲背離顯示在下面
        divergence_text_bottom += (div_type % 2 == 0 ? showindis != 'Don\'t Show' ? array.get(indicators_name, x) + '\n' : '' : '')
        
        


// draw labels
if showindis != 'Don\'t Show' or shownum
    //如果要顯示指標數量..就把數量塞在最後
    if shownum and dnumdiv_top > 0
        divergence_text_top += str.tostring(dnumdiv_top)

    if shownum and dnumdiv_bottom > 0
        divergence_text_bottom += str.tostring(dnumdiv_bottom)

    //文字有資料就塞在label裡顯示出來
    if divergence_text_top != ''
        //如果設定只顯示最後一筆..把過去的label全都清掉
        if showlast
            delete_old_neg_div_labels()
        array.push(neg_div_labels, label.new(x=bar_index, y=math.max(high, high[1]), text=divergence_text_top, color=top_label_col, textcolor=neg_div_text_col, style=label.style_label_down))

    if divergence_text_bottom != ''
        if showlast
            delete_old_pos_div_labels()
        array.push(pos_div_labels, label.new(x=bar_index, y=math.min(low, low[1]), text=divergence_text_bottom, color=bottom_label_col, textcolor=pos_div_text_col, style=label.style_label_up))

// 2個以上穩合的指標再通知
alertcondition(pos_reg_div_detected and dnumdiv_bottom > 1, title='Positive Regular Divergence Detected', message='Positive Regular Divergence Detected')
alertcondition(neg_reg_div_detected and dnumdiv_top > 1, title='Negative Regular Divergence Detected', message='Negative Regular Divergence Detected')
alertcondition(pos_hid_div_detected and dnumdiv_bottom > 1, title='Positive Hidden Divergence Detected', message='Positive Hidden Divergence Detected')
alertcondition(neg_hid_div_detected and dnumdiv_top > 1, title='Negative Hidden Divergence Detected', message='Negative Hidden Divergence Detected')


// 上面已經會個別傳送了
// alertcondition(pos_reg_div_detected or pos_hid_div_detected, title='Positive Divergence Detected', message='Positive Divergence Detected')
// alertcondition(neg_reg_div_detected or neg_hid_div_detected, title='Negative Divergence Detected', message='Negative Divergence Detected')